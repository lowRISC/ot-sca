target:
  target_type: chip
  fw_bin: "../objs/sca_ujson_chip_signed.img"
  opentitantool: "../objs/opentitantool"
  target_clk_mult: 1
  target_freq: 100000000
  baudrate: 115200
  # You can specify the port or leave it empty to find it automatically.
  # Trigger source.
  # hw: Precise, hardware-generated trigger - FPGA only.
  # sw: Fully software-controlled trigger.
  trigger: "sw"
waverunner:
  waverunner_ip: 192.168.33.128
  # num_samples: 6000
  # offset_samples: 0
  # cycles will only be used if not given in samples
  num_cycles: 60
  offset_cycles: 0
  # sampling rate needed for cycle to sample conversion
  sampling_rate: 2500000000
  channel: C1
  sparsing: 0
capture:
  # scope_select: husky, waverunner, none
  scope_select: none
  num_traces: 1000
  num_segments: 20
  show_plot: False
  plot_traces: 100
  # trace_db: cw
  trace_db: ot_trace_library
  trace_threshold: 10000
test:
  which_test: daisy_chain
  # which_test: single
  # which_test: daisy_chain
  # which_test: aes_random
  # which_test: aes_fvsr_key
  # which_test: aes_fvsr_data
  # These initial values are used only for random capture but not fixed-vs-random.
  key_fixed: [0x81, 0x1E, 0x37, 0x31, 0xB0, 0x12, 0x0A, 0x78, 0x42, 0x78, 0x1E, 0x22, 0xB2, 0x5C, 0xDD, 0xF9]
  text_fixed: [0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA]
  key_for_gen: [0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF1, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xE0, 0xF0]
  # seed for PRNG to generate sequence of plaintexts and keys; Python random class on host, Mersenne twister implementation on OT SW
  batch_prng_seed: 0
  # 32-bit seed for masking on device. To switch off the masking, use 0 as LFSR seed.
  # lfsr_seed: 0x00000000
  lfsr_seed: 0xdeadbeef
  core_config: {
    "enable_icache": True,
    "enable_dummy_instr": True,
    "dummy_instr_count": 3,
    "enable_jittery_clock": True,
    "enable_sram_readback": True,
    "enable_data_ind_timing": True,
  }
  sensor_config: {
      "sensor_ctrl_enable": True,
      "sensor_ctrl_en_fatal": [
          False,
          False,
          False,
          False,
          False,
          False,
          False,
          False,
          False,
          False,
          False,
      ],
  }
