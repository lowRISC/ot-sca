target:
  target_type: cw310
  fpga_bitstream: "../objs/lowrisc_systems_chip_earlgrey_cw310_0.1_aes.bit"
  force_program_bitstream: True
  fw_bin: "../objs/sca_aes_ujson_fpga_cw310.bin"
  opentitantool: "../objs/opentitantool"
  port: "/dev/ttyACM_CW310_1"
  # target_clk_mult is a hardcoded value in the bitstream. Do not change.
  target_clk_mult: 0.10
  target_freq: 10000000
  # Trigger source.
  # hw: Precise, hardware-generated trigger - FPGA only.
  # sw: Fully software-controlled trigger.
  trigger: "hw"
husky:
  sampling_rate: 200000000
  num_cycles: 60
  offset_cycles: -2
  scope_gain: 38
waverunner:
  waverunner_ip: 100.107.71.10
  num_samples: 6000
  sample_offset: 0
capture:
  scope_select: husky
  # scope_select: waverunner
  num_segments: 20
  num_traces: 1000
  show_plot: True
  plot_traces: 100
  trace_db: ot_trace_library
  # trace_db: cw
  trace_threshold: 10000
test:
  # which_test: daisy_chain
  # which_test: single
  # which_test: daisy_chain
  # which_test: aes_random
  which_test: aes_fvsr_key
  # which_test: aes_fvsr_data
  # These initial values are used only for random capture but not fixed-vs-random.
  key_fixed: [0x81, 0x1E, 0x37, 0x31, 0xB0, 0x12, 0x0A, 0x78, 0x42, 0x78, 0x1E, 0x22, 0xB2, 0x5C, 0xDD, 0xF9]
  text_fixed: [0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA]
  key_for_gen: [0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF1, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xE0, 0xF0]
  # seed for PRNG to generate sequence of plaintexts and keys; Python random class on host, Mersenne twister implementation on OT SW
  batch_prng_seed: 0
  # 32-bit seed for masking on device. To switch off the masking, use 0 as LFSR seed.
  lfsr_seed: 0x00000000
  # lfsr_seed: 0xdeadbeef
  core_config: {
    "enable_icache": True,
    "enable_dummy_instr": True,
    "dummy_instr_count": 3,
    "enable_jittery_clock": True,
    "enable_sram_readback": True,
    "enable_data_ind_timing": True,
  }
  sensor_config: {
      "sensor_ctrl_enable": True,
      "sensor_ctrl_en_fatal": [
          False,
          False,
          False,
          False,
          False,
          False,
          False,
          False,
          False,
          False,
          False,
      ],
  }
