target:
  target_type: cw310
  fpga_bitstream: ../objs/lowrisc_systems_chip_earlgrey_cw310_0.1_kmac.bit
  force_program_bitstream: True
  # fw_bin: ../objs/kmac_serial_fpga_cw310.bin
  fw_bin: "../objs/sca_kmac_ujson_fpga_cw310.bin"
  opentitantool: "../objs/opentitantool"
  # target_clk_mult is a hardcoded value in the bitstream. Do not change.
  target_clk_mult: 0.10
  target_freq: 10000000
  port: "/dev/ttyACM_CW310_1"
  # Trigger source.
  # hw: Precise, hardware-generated trigger - FPGA only.
  # sw: Fully software-controlled trigger.
  trigger: "hw"
husky:
  sampling_rate: 200000000
  # Number of target clock cycles per trace - KMAC is doing 24 or 96 cycles
  # for the key absorb w/o or w/ DOM, respectively, as well as 23 cycles for
  # XORing the key into the state.
  # w/o DOM
  #num_cycles: 80
  # w/ DOM
  num_cycles: 160
  # Offset in target clock cycles - During the first activity block, KMAC
  # just absorbs the fixed prefix (23 cycles XORing + 24 or 96 cycles
  # absorbing w/o or w/ DOM, respectively). This first activity block can be
  # skipped
  # w/o DOM
  #offset_cyles: 43
  # w/ DOM
  offset_cycles: 115
  scope_gain: 26
capture:
  scope_select: husky
  num_segments: 20
  num_traces: 1000
  show_plot: True
  plot_traces: 100
  trace_image_filename: projects/sample_traces_kmac.html
  trace_db: ot_trace_library
  trace_threshold: 10000
test:
  # which_test: single
  which_test: fvsr_key
  # which_test: daisy_chain
  # which_test: single
  key_fixed: [0x81, 0x1E, 0x37, 0x31, 0xB0, 0x12, 0x0A, 0x78, 0x42, 0x78, 0x1E, 0x22, 0xB2, 0x5C, 0xDD, 0xF9]
  text_fixed: [0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA]
  # 32-bit seed for SW key masking. Key masks are generated using an LFSR.
  # For unprotected implemetation, lfsr_seed should be set to 0. This will
  # effectively switch off the masking. For masked implementation, any seed
  # other than 0 should be used.
  # w/o DOM
  #lfsr_seed: 0
  # w/ DOM
  lfsr_seed: 0xdeadbeef
  # seed for PRNG to generate sequence of plaintexts and keys; Python random class on host, Mersenne twister implementation on OT SW
  batch_prng_seed: 0
  core_config: {
    "enable_icache": True,
    "enable_dummy_instr": True,
    "dummy_instr_count": 3,
    "enable_jittery_clock": True,
    "enable_sram_readback": True,
    "enable_data_ind_timing": True,
  }
  sensor_config: {
      "sensor_ctrl_enable": True,
      "sensor_ctrl_en_fatal": [
          False,
          False,
          False,
          False,
          False,
          False,
          False,
          False,
          False,
          False,
          False,
      ],
  }
